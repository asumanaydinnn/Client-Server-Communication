import java.io.IOException;
import java.io.InputStream;
import java.net.Socket;
import java.nio.charset.StandardCharsets;
import java.io.*;
import java.util.*;
import java.nio.ByteBuffer;
import java.lang.*;


/**
 * Programming Assignment 2
 * Encryption and Security
 * 
 * @author Asuman Ayd?n & Muhammad Bin Sanaullah
 * @version 1.0
 * @since 2020-04-7
 */

public class SecureClient {

 private static InputStream inputStream = null;
 private static ByteArrayOutputStream baos = null;
 private static Socket socketClient = null;
 static byte[] serverPublicKeys;
 static OutputStream out = null;


 /**
  * This is the main method
  * 
  * @param args used to take localhost and port
  * @return Nothing.
  * @exception IOException On input errors.
  * @see IOException
  */
 public static void main(String args[]) throws IOException {

  
  CryptoHelper crypto = new CryptoHelper();
  int attempt = 1;
  byte[] cert; byte[] signature; byte[] serverPublicKeys;

  while(true){
    
   int p = Integer.parseInt(args[0]);
   socketClient = new Socket("127.0.0.1", p);
    
    System.out.println("\nAttempt # " +attempt);
   System.out.println("Connection is started.");
   
   inputStream = socketClient.getInputStream();
   baos = new ByteArrayOutputStream();
   out =  socketClient.getOutputStream();
   
    sendHELLO();
    cert =  new byte[0]; 
    cert  = receiveHELLO();
    signature = getSignature(cert);
    String ca = getCA(cert);
    serverPublicKeys  = getPK(cert);

   // Verification is successful:
   if (crypto.verifySignature(cert, signature, ca)) 
   {
    System.out.println("success");
    break;
   }
   // Verification fails:
   else 
   {
    System.out.println("fail");
    socketClient.close();
   }
   attempt++;
  }
  
  // Create and send encrypted secret
  int secret = crypto.generateSecret();
  byte[] secretEncrypted = crypto.encryptSecretAsymmetric(secret, serverPublicKeys);
  
  sendSECRET(secretEncrypted);
  // --- HANDSHAKE END
  // --- AUTHENTICATION START
  sendSTARTENC();  // Start encryption
  // Send encrypted authentication info
  byte[] authEncrypted = crypto.encryptSymmetric("bilkent cs421", secret);
  sendAUTH(authEncrypted);
  
  // Receive authentication response
  byte[] data = receiveRESPONSE();
  String response = crypto.decryptSymmetric(data, secret);
  print(response);  // This should be "OK"

  sendENDENC();  // End encryption

  // --- AUTHENTICATION END
  // --- VIEW PUBLIC POSTS START
  sendPUBLIC();
  byte[] dataResponse = receiveRESPONSE();

  // Decode the byte array into a string & display
  String responseData = decodeUS_ASCII(dataResponse);
  print(responseData);
  // --- VIEW PUBLIC POSTS END


  // --- VIEW PRIVATE MESSAGES START
  sendSTARTENC();  // Start encryption
  sendPRIVATE();

  // Receive, decrypt & display
  byte[] data3 = receiveRESPONSE();
  String response3 = crypto.decryptSymmetric(data3, secret);
  print(response3);

  sendENDENC();  // End encryption
  // --- VIEW PRIVATE MESSAGES END

  // LOGOUT
  sendLOGOUT();
  socketClient.close();

 }

 private static void sendLOGOUT() throws IOException {
  // TODO Auto-generated method stub
 String hello = "LOGOUTxx";
  byte[] helloByte = hello.getBytes(StandardCharsets.US_ASCII);
  byte[] size = ByteBuffer.allocate(4).putInt(0).array();
  ByteArrayOutputStream baos = new ByteArrayOutputStream();
  baos.write(helloByte);
  baos.write(size);
  byte[] c = baos.toByteArray();
  out.write(c);
 }

 private static void sendPRIVATE() throws IOException {
  // TODO Auto-generated method stub
  String hello = "PRIVATEx";
  byte[] helloByte = hello.getBytes(StandardCharsets.US_ASCII);
  byte[] size = ByteBuffer.allocate(4).putInt(0).array();
  ByteArrayOutputStream baos = new ByteArrayOutputStream();
  baos.write(helloByte);
  baos.write(size);
  byte[] c = baos.toByteArray();
  out.write(c);
 }

 private static String decodeUS_ASCII(byte[] data) {
  // TODO Auto-generated method stub
   String s = "";
   try
   {
     s = new String(data,"ASCII");//decoding needs to specific to US-ASCII
   }
   catch(Exception e)
   {
     System.out.print(e.toString());
   }
  return s;
 }

 private static void sendPUBLIC() throws IOException {
  String hello = "PUBLICxx";
  byte[] helloByte = hello.getBytes(StandardCharsets.US_ASCII);
  byte[] size = ByteBuffer.allocate(4).putInt(0).array();
  byte[] data = new byte[0];
  ByteArrayOutputStream baos = new ByteArrayOutputStream();
  baos.write(helloByte);
  baos.write(size);
  byte[] c = baos.toByteArray();
  out.write(c);
 }

 private static void print(String response) {
  // TODO Auto-generated method stub
  System.out.println("Response:" + response);
 }

 private static byte[] receiveRESPONSE() {
  // TODO Auto-generated method stub
   byte[] header = new byte[8];
    byte[] length = new byte[4];
    byte[] data = null;
    try {
      inputStream.read(header);
      String headerX = decodeUS_ASCII(header);
      if(headerX.contains("RESPONSE"))
      {
        inputStream.read(length);
        int lengthx = byteArrayToInt(length);
        data = new byte[lengthx];
        inputStream.read(data);
        return data;
      }
    }
    catch(IOException exc)
    {
      System.out.println("About Handshake" + exc.getMessage());
    }
   return data;
 }

 private static void sendAUTH(byte[] authEncrypted) throws IOException {
  // TODO Auto-generated method stub
 String auth = "AUTHxxxx";
  byte[] authByte = auth.getBytes(StandardCharsets.US_ASCII);
  int length1 = authEncrypted.length;
  byte[] size = ByteBuffer.allocate(4).putInt(length1).array();
  ByteArrayOutputStream baos = new ByteArrayOutputStream();
  baos.write(authByte);
  baos.write(size);
  baos.write(authEncrypted);
  byte[] c = baos.toByteArray();

  out.write(c);
 }

 private static void sendSTARTENC() throws IOException {
  // TODO Auto-generated method stub
  String hello = "STARTENC";
  byte[] helloByte = hello.getBytes(StandardCharsets.US_ASCII);
  byte[] size = ByteBuffer.allocate(4).putInt(0).array();
  ByteArrayOutputStream baos = new ByteArrayOutputStream();
  baos.write(helloByte);
  baos.write(size);
  byte[] c = baos.toByteArray();
  out.write(c);
 }
 private static void sendENDENC() throws IOException {
  // TODO Auto-generated method stub
  String hello = "ENDENCxx";
  byte[] helloByte = hello.getBytes(StandardCharsets.US_ASCII);
  byte[] size = ByteBuffer.allocate(4).putInt(0).array();
  ByteArrayOutputStream baos = new ByteArrayOutputStream();
  baos.write(helloByte);
  baos.write(size);
  byte[] c = baos.toByteArray();
  out.write(c);
 }
 private static void sendSECRET(byte[] secretEncrypted) throws IOException  {
   String secret = "SECRETxx";
  byte[] secretByte = secret.getBytes(StandardCharsets.US_ASCII);
  int length1 = secretEncrypted.length;
  byte[] size = ByteBuffer.allocate(4).putInt(length1).array();

  ByteArrayOutputStream baos = new ByteArrayOutputStream();
  baos.write(secretByte);
  baos.write(size);
  baos.write(secretEncrypted);
  byte[] c = baos.toByteArray();

  out.write(c);
 }

 private static byte[] getPK(byte[] cert) throws IOException {

   byte[] pk = new byte[17]; int j = 0;
   for (int i = 19; i < 36; i++)
   {
     pk[j] = cert[i];
     j++;
   }
   return pk;
  }

 private static String getCA(byte[] cert) throws IOException  {
 
    String cert_ca = decodeUS_ASCII(cert);
    cert_ca = cert_ca.substring(cert_ca.indexOf("CA=") + 3);
    cert_ca = cert_ca.substring(0, cert_ca.indexOf("SI"));
    return cert_ca;
 }

 private static byte[] getSignature(byte[] cert) throws IOException 
 {
  byte[] signature =  Arrays.copyOfRange(cert, cert.length-8,cert.length);
  return signature;
 }

 private static byte[] receiveHELLO() {

    byte[] header = new byte[8];
    byte[] length = new byte[4];

  try {
    byte[] data = null;
    inputStream.read(header);
    String headerHello = decodeUS_ASCII(header);
    if(headerHello.contains("HELLO"))
    {
      inputStream.read(length);
      System.out.println(length);
      int lengthx = byteArrayToInt(length);
      data = new byte[lengthx];
      inputStream.read(data);
    }
   return data;
  }
  catch(IOException exc)
  {
   System.out.println("About Handshake" + exc.getMessage());
   return null;
  }
  //return null;
 }

 private static void sendHELLO() throws IOException {
  
  String hello = "HELLOxxx";
  byte[] helloByte = hello.getBytes(StandardCharsets.US_ASCII);
  byte[] size = ByteBuffer.allocate(4).putInt(0).array();
  byte[] data = new byte[0];
  ByteArrayOutputStream baos = new ByteArrayOutputStream();
  baos.write(helloByte);
  baos.write(size);
  byte[] c = baos.toByteArray();
  out.write(c);
 }

//change the names etc
public static int byteArrayToInt(byte[] b) 
{
    ByteBuffer byteBuffer = ByteBuffer.wrap(b);
    int a = byteBuffer.getInt();
    System.out.println(a);
    return a;
}
}